# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional, Union
from pydantic.v1 import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist

class LegacyImageGenerationResponse(BaseModel):
    """
    Legacy model response.  # noqa: E501
    """
    completion: Optional[Any] = Field(...)
    prediction_time_ms: Union[StrictFloat, StrictInt] = Field(...)
    replica: StrictStr = Field(...)
    seed: StrictInt = Field(...)
    removed_for_safety: conlist(StrictBool) = Field(...)
    __properties = ["completion", "prediction_time_ms", "replica", "seed", "removed_for_safety"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LegacyImageGenerationResponse:
        """Create an instance of LegacyImageGenerationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if completion (nullable) is None
        # and __fields_set__ contains the field
        if self.completion is None and "completion" in self.__fields_set__:
            _dict['completion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LegacyImageGenerationResponse:
        """Create an instance of LegacyImageGenerationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LegacyImageGenerationResponse.parse_obj(obj)

        _obj = LegacyImageGenerationResponse.parse_obj({
            "prediction_time_ms": obj.get("prediction_time_ms"),
            "replica": obj.get("replica"),
            "seed": obj.get("seed"),
            "removed_for_safety": obj.get("removed_for_safety")
        })
        return _obj


