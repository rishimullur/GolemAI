# coding: utf-8

"""
    fine-tuning-api-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from clients.fine_tuning.models.details1 import Details1
from clients.fine_tuning.models.tune_result import TuneResult
from clients.fine_tuning.models.tune_status import TuneStatus
from clients.fine_tuning.models.tune_type import TuneType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Tune(BaseModel):
    """
    A tune base class.
    """ # noqa: E501
    created_at: datetime = Field(description="The time this tune task was created.")
    deleted_at: Optional[datetime] = None
    description: StrictStr = Field(description="The description of the tune.")
    details: Details1
    id: StrictStr = Field(description="The ID of the LoRA tune.")
    name: StrictStr = Field(description="The name of the tune.")
    output_lora_ids: List[StrictStr] = Field(description="The output LoRA IDs, if the task was successful.")
    result: Optional[TuneResult] = None
    status: TuneStatus
    status_details: StrictStr = Field(description="The details of the status, only used when the associated task failed.")
    succeeded_at: Optional[datetime] = None
    tenant_id: StrictStr = Field(description="The tenant who requested the LoRA tune.")
    tune_type: TuneType
    updated_at: datetime = Field(description="The time this tune task was updated.")
    __properties: ClassVar[List[str]] = ["created_at", "deleted_at", "description", "details", "id", "name", "output_lora_ids", "result", "status", "status_details", "succeeded_at", "tenant_id", "tune_type", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Tune from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict['result'] = None

        # set to None if succeeded_at (nullable) is None
        # and model_fields_set contains the field
        if self.succeeded_at is None and "succeeded_at" in self.model_fields_set:
            _dict['succeeded_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Tune from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "description": obj.get("description"),
            "details": Details1.from_dict(obj.get("details")) if obj.get("details") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "output_lora_ids": obj.get("output_lora_ids"),
            "result": TuneResult.from_dict(obj.get("result")) if obj.get("result") is not None else None,
            "status": obj.get("status"),
            "status_details": obj.get("status_details"),
            "succeeded_at": obj.get("succeeded_at"),
            "tenant_id": obj.get("tenant_id"),
            "tune_type": obj.get("tune_type"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


