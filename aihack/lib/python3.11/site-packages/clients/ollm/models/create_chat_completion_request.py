# coding: utf-8

"""
    ollm-api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from clients.ollm.models.chat_completion_request_ext import ChatCompletionRequestExt
from clients.ollm.models.chat_completion_response_format import ChatCompletionResponseFormat
from clients.ollm.models.chat_message import ChatMessage
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateChatCompletionRequest(BaseModel):
    """
    An OpenAI API compatible schema for a chat completion request.  See: https://platform.openai.com/docs/api-reference/chat/create for more information.
    """ # noqa: E501
    frequency_penalty: Optional[Union[Annotated[float, Field(le=2.0, strict=True, ge=-2.0)], Annotated[int, Field(le=2, strict=True, ge=-2)]]] = None
    function_call: Optional[StrictStr] = None
    functions: Optional[Any] = None
    ignore_eos: Optional[StrictBool] = None
    logit_bias: Optional[Any] = None
    max_tokens: Optional[Union[StrictFloat, StrictInt]] = None
    messages: List[ChatMessage]
    model: StrictStr
    n: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    octoai: Optional[ChatCompletionRequestExt] = None
    presence_penalty: Optional[Union[Annotated[float, Field(le=2.0, strict=True, ge=-2.0)], Annotated[int, Field(le=2, strict=True, ge=-2)]]] = None
    repetition_penalty: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    response_format: Optional[ChatCompletionResponseFormat] = None
    stop: Optional[StrictStr] = None
    stream: Optional[StrictBool] = None
    temperature: Optional[Union[Annotated[float, Field(le=2.0, strict=True, ge=0.0)], Annotated[int, Field(le=2, strict=True, ge=0)]]] = None
    top_p: Optional[Union[Annotated[float, Field(le=1.0, strict=True)], Annotated[int, Field(le=1, strict=True)]]] = None
    user: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["frequency_penalty", "function_call", "functions", "ignore_eos", "logit_bias", "max_tokens", "messages", "model", "n", "octoai", "presence_penalty", "repetition_penalty", "response_format", "stop", "stream", "temperature", "top_p", "user"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateChatCompletionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of functions
        if self.functions:
            _dict['functions'] = self.functions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logit_bias
        if self.logit_bias:
            _dict['logit_bias'] = self.logit_bias.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item in self.messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of octoai
        if self.octoai:
            _dict['octoai'] = self.octoai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response_format
        if self.response_format:
            _dict['response_format'] = self.response_format.to_dict()
        # set to None if frequency_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.frequency_penalty is None and "frequency_penalty" in self.model_fields_set:
            _dict['frequency_penalty'] = None

        # set to None if function_call (nullable) is None
        # and model_fields_set contains the field
        if self.function_call is None and "function_call" in self.model_fields_set:
            _dict['function_call'] = None

        # set to None if functions (nullable) is None
        # and model_fields_set contains the field
        if self.functions is None and "functions" in self.model_fields_set:
            _dict['functions'] = None

        # set to None if ignore_eos (nullable) is None
        # and model_fields_set contains the field
        if self.ignore_eos is None and "ignore_eos" in self.model_fields_set:
            _dict['ignore_eos'] = None

        # set to None if logit_bias (nullable) is None
        # and model_fields_set contains the field
        if self.logit_bias is None and "logit_bias" in self.model_fields_set:
            _dict['logit_bias'] = None

        # set to None if max_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.max_tokens is None and "max_tokens" in self.model_fields_set:
            _dict['max_tokens'] = None

        # set to None if n (nullable) is None
        # and model_fields_set contains the field
        if self.n is None and "n" in self.model_fields_set:
            _dict['n'] = None

        # set to None if octoai (nullable) is None
        # and model_fields_set contains the field
        if self.octoai is None and "octoai" in self.model_fields_set:
            _dict['octoai'] = None

        # set to None if presence_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.presence_penalty is None and "presence_penalty" in self.model_fields_set:
            _dict['presence_penalty'] = None

        # set to None if repetition_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.repetition_penalty is None and "repetition_penalty" in self.model_fields_set:
            _dict['repetition_penalty'] = None

        # set to None if response_format (nullable) is None
        # and model_fields_set contains the field
        if self.response_format is None and "response_format" in self.model_fields_set:
            _dict['response_format'] = None

        # set to None if stop (nullable) is None
        # and model_fields_set contains the field
        if self.stop is None and "stop" in self.model_fields_set:
            _dict['stop'] = None

        # set to None if stream (nullable) is None
        # and model_fields_set contains the field
        if self.stream is None and "stream" in self.model_fields_set:
            _dict['stream'] = None

        # set to None if temperature (nullable) is None
        # and model_fields_set contains the field
        if self.temperature is None and "temperature" in self.model_fields_set:
            _dict['temperature'] = None

        # set to None if top_p (nullable) is None
        # and model_fields_set contains the field
        if self.top_p is None and "top_p" in self.model_fields_set:
            _dict['top_p'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateChatCompletionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frequency_penalty": obj.get("frequency_penalty"),
            "function_call": obj.get("function_call"),
            "functions": AnyOf.from_dict(obj.get("functions")) if obj.get("functions") is not None else None,
            "ignore_eos": obj.get("ignore_eos"),
            "logit_bias": AnyOf.from_dict(obj.get("logit_bias")) if obj.get("logit_bias") is not None else None,
            "max_tokens": obj.get("max_tokens"),
            "messages": [ChatMessage.from_dict(_item) for _item in obj.get("messages")] if obj.get("messages") is not None else None,
            "model": obj.get("model"),
            "n": obj.get("n"),
            "octoai": ChatCompletionRequestExt.from_dict(obj.get("octoai")) if obj.get("octoai") is not None else None,
            "presence_penalty": obj.get("presence_penalty"),
            "repetition_penalty": obj.get("repetition_penalty"),
            "response_format": ChatCompletionResponseFormat.from_dict(obj.get("response_format")) if obj.get("response_format") is not None else None,
            "stop": obj.get("stop"),
            "stream": obj.get("stream"),
            "temperature": obj.get("temperature"),
            "top_p": obj.get("top_p"),
            "user": obj.get("user")
        })
        return _obj


