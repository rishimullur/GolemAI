# coding: utf-8

"""
    asset-lake-api-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic.v1 import BaseModel, Field
from clients.asset_lake.models.archiver_volume_storage_ref import ArchiverVolumeStorageRef

class StorageDescriptor(BaseModel):
    """
    StorageDescriptor
    """
    archiver_storage_ref: ArchiverVolumeStorageRef = Field(...)
    storage_format: Optional[Any] = Field(...)
    __properties = ["archiver_storage_ref", "storage_format"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StorageDescriptor:
        """Create an instance of StorageDescriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of archiver_storage_ref
        if self.archiver_storage_ref:
            _dict['archiver_storage_ref'] = self.archiver_storage_ref.to_dict()
        # set to None if storage_format (nullable) is None
        # and __fields_set__ contains the field
        if self.storage_format is None and "storage_format" in self.__fields_set__:
            _dict['storage_format'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StorageDescriptor:
        """Create an instance of StorageDescriptor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StorageDescriptor.parse_obj(obj)

        _obj = StorageDescriptor.parse_obj({
            "archiver_storage_ref": ArchiverVolumeStorageRef.from_dict(obj.get("archiver_storage_ref")) if obj.get("archiver_storage_ref") is not None else None,
            "storage_format": obj.get("storage_format")
        })
        return _obj


