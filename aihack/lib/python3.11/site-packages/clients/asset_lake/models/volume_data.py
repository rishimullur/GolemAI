# coding: utf-8

"""
    asset-lake-api-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictStr
from clients.asset_lake.models.storage_descriptor import StorageDescriptor

class VolumeData(BaseModel):
    """
    VolumeData
    """
    asset_type: Optional[Any] = Field(None, description="Asset type.")
    deletion_cleanup_done: StrictBool = Field(..., description="Determine if cleanup is finished.")
    mark_for_deletion_time: Optional[StrictStr] = Field(...)
    storage: StorageDescriptor = Field(...)
    version: StrictStr = Field(..., description="Version.")
    __properties = ["asset_type", "deletion_cleanup_done", "mark_for_deletion_time", "storage", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VolumeData:
        """Create an instance of VolumeData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        # set to None if asset_type (nullable) is None
        # and __fields_set__ contains the field
        if self.asset_type is None and "asset_type" in self.__fields_set__:
            _dict['asset_type'] = None

        # set to None if mark_for_deletion_time (nullable) is None
        # and __fields_set__ contains the field
        if self.mark_for_deletion_time is None and "mark_for_deletion_time" in self.__fields_set__:
            _dict['mark_for_deletion_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VolumeData:
        """Create an instance of VolumeData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VolumeData.parse_obj(obj)

        _obj = VolumeData.parse_obj({
            "asset_type": obj.get("asset_type"),
            "deletion_cleanup_done": obj.get("deletion_cleanup_done"),
            "mark_for_deletion_time": obj.get("mark_for_deletion_time"),
            "storage": StorageDescriptor.from_dict(obj.get("storage")) if obj.get("storage") is not None else None,
            "version": obj.get("version")
        })
        return _obj


