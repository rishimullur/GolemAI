# coding: utf-8

"""
    asset-lake-api-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StsTransferApi(BaseModel):
    """
    StsTransferApi
    """ # noqa: E501
    aws_access_key_id: StrictStr = Field(description="AWS access key.")
    aws_secret_access_key: StrictStr = Field(description="AWS secret accesss key.")
    aws_session_token: Optional[StrictStr] = None
    s3_bucket: StrictStr = Field(description="S3 bucket.")
    s3_endpoint_url: Optional[StrictStr] = None
    s3_key: StrictStr = Field(description="S3 key.")
    s3_url: StrictStr = Field(description="S3 full URL.")
    type: Optional[Any] = Field(default=None, description="URL type.")
    __properties: ClassVar[List[str]] = ["aws_access_key_id", "aws_secret_access_key", "aws_session_token", "s3_bucket", "s3_endpoint_url", "s3_key", "s3_url", "type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StsTransferApi from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if aws_session_token (nullable) is None
        # and model_fields_set contains the field
        if self.aws_session_token is None and "aws_session_token" in self.model_fields_set:
            _dict['aws_session_token'] = None

        # set to None if s3_endpoint_url (nullable) is None
        # and model_fields_set contains the field
        if self.s3_endpoint_url is None and "s3_endpoint_url" in self.model_fields_set:
            _dict['s3_endpoint_url'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StsTransferApi from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aws_access_key_id": obj.get("aws_access_key_id"),
            "aws_secret_access_key": obj.get("aws_secret_access_key"),
            "aws_session_token": obj.get("aws_session_token"),
            "s3_bucket": obj.get("s3_bucket"),
            "s3_endpoint_url": obj.get("s3_endpoint_url"),
            "s3_key": obj.get("s3_key"),
            "s3_url": obj.get("s3_url"),
            "type": obj.get("type")
        })
        return _obj


